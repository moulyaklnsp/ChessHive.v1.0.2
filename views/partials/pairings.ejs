<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pairings & Results - ChessHive</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        :root {
            --sea-green: #2E8B57;
            --cream: #FFFDD0;
            --sky-blue: #87CEEB;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Playfair Display', serif;
            background-color: var(--cream);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
        }

        h1 {
            font-family: 'Cinzel', serif;
            font-size: 3rem;
            color: var(--sea-green);
            margin-bottom: 2rem;
            text-align: center;
        }

        h2 {
            font-family: 'Cinzel', serif;
            font-size: 2.5rem;
            color: var(--sea-green);
            margin-bottom: 2rem;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }

        h2::before {
            content: '‚öîÔ∏è';
            font-size: 2.5rem;
        }

        .pairings-container {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
        }

        th {
            background-color: var(--sea-green);
            color: white;
            padding: 1rem;
            text-align: left;
            font-family: 'Cinzel', serif;
        }

        td {
            padding: 1rem;
            border-bottom: 1px solid rgba(46, 139, 87, 0.2);
        }

        tr:hover {
            background-color: rgba(135, 206, 235, 0.1);
        }

        .score {
            color: var(--sea-green);
            font-weight: bold;
        }

        .bye {
            color: #666;
            font-style: italic;
        }

        .navigation {
            text-align: right;
            margin-top: 2rem;
        }

        .nav-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--sea-green);
            color: white;
            text-decoration: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-family: 'Cinzel', serif;
            font-weight: bold;
        }

        .nav-link:hover {
            background: #236B43;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .tree-container {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }

        .tree-container h2::before {
            content: 'üèÜ';
        }

        svg {
            width: 100%;
            height: auto;
        }

        .node rect {
            fill: var(--sea-green);
            stroke: var(--cream);
            stroke-width: 2px;
            rx: 5;
            ry: 5;
        }

        .node text {
            font-family: 'Playfair Display', serif;
            font-size: 14px;
            fill: #fff;
            dominant-baseline: middle;
            text-anchor: middle;
        }

        .link {
            fill: none;
            stroke: var(--sea-green);
            stroke-width: 2px;
        }

        #data-container {
            display: none;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            h1 {
                font-size: 2.5rem;
            }

            h2 {
                font-size: 2rem;
            }

            .pairings-container, .tree-container {
                padding: 1rem;
            }

            .node text {
                font-size: 12px;
            }

            .node rect {
                width: 80px;
                height: 30px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Pairings & Results</h1>

        <% if (allRounds.length === 0) { %>
            <p>No pairings available.</p>
        <% } else { %>
            <% allRounds.forEach(roundData => { %>
                <div class="pairings-container">
                    <h2>Round <%= roundData.round %></h2>
                    <table>
                        <tr>
                            <th>Player 1</th>
                            <th>Player 2</th>
                            <th>Result</th>
                        </tr>
                        <% roundData.pairings.forEach(pair => { %>
                            <tr>
                                <td><%= pair.player1.username %> (Score: <%= pair.player1.score %>)</td>
                                <td><%= pair.player2 ? pair.player2.username : 'BYE' %></td>
                                <td><%= pair.result %></td>
                            </tr>
                        <% }); %>
                    </table>
                    
                    <% if (roundData.byePlayer) { %>
                        <p><strong>BYE:</strong> <%= roundData.byePlayer.username %> (Score: <%= roundData.byePlayer.score %>)</p>
                    <% } %>
                </div>
            <% }); %>
        <% } %>

        <div id="data-container" data-rounds='<%- JSON.stringify(allRounds || []) %>'></div>

        <div class="tree-container">
            <h2>Tournament Progression</h2>
            <svg id="tournament-tree"></svg>
        </div>
    </div>
    <div class="navigation">
        <a href="/coordinator/tournament_management" class="nav-link">
            <i class="fas fa-users"></i> Back to Tournaments
        </a>
    </div>

    <script>
        // Safely retrieve and parse allRounds data from hidden div
        let allRounds;
        try {
            const dataContainer = document.getElementById('data-container');
            const roundsData = dataContainer ? dataContainer.getAttribute('data-rounds') : '[]';
            allRounds = JSON.parse(roundsData);
            if (!Array.isArray(allRounds)) {
                throw new Error("allRounds is not an array");
            }
        } catch (e) {
            console.error("Error parsing allRounds:", e);
            allRounds = [];
        }

        // Extract player usernames from allRounds
        let players = [];
        allRounds.forEach(round => {
            if (round && round.pairings) {
                round.pairings.forEach(pair => {
                    if (pair && pair.player1 && pair.player1.username && !players.includes(pair.player1.username)) {
                        players.push(pair.player1.username);
                    }
                    if (pair && pair.player2 && pair.player2.username && !players.includes(pair.player2.username)) {
                        players.push(pair.player2.username);
                    }
                });
            }
            if (round && round.byePlayer && round.byePlayer.username && !players.includes(round.byePlayer.username)) {
                players.push(round.byePlayer.username);
            }
        });

        // Determine number of slots (round up to next power of 2 if odd)
        const playerCount = players.length || 2; // Fallback to 2 if no players
        const isOdd = playerCount % 2 !== 0;
        const slots = isOdd ? Math.pow(2, Math.ceil(Math.log2(playerCount))) : playerCount;
        
        // Fill slots with players and BYE as needed
        while (players.length < slots) {
            players.push("BYE");
        }
        players = players.slice(0, slots);

        // Build tree data for D3.js
        const treeData = {
            name: "Winner",
            children: []
        };

        // Create first round matches
        const firstRound = [];
        for (let i = 0; i < slots; i += 2) {
            if (i + 1 < slots) {
                firstRound.push({
                    name: `Match ${i / 2 + 1}`,
                    children: [
                        { name: players[i] },
                        { name: players[i + 1] }
                    ]
                });
            } else {
                firstRound.push({
                    name: players[i]
                });
            }
        }

        // Create subsequent rounds
        let currentRound = firstRound;
        let roundIndex = 1;
        while (currentRound.length > 1) {
            const nextRound = [];
            for (let i = 0; i < currentRound.length; i += 2) {
                if (i + 1 < currentRound.length) {
                    nextRound.push({
                        name: `Round ${roundIndex}-${i / 2 + 1}`,
                        children: [currentRound[i], currentRound[i + 1]]
                    });
                } else {
                    nextRound.push(currentRound[i]);
                }
            }
            currentRound = nextRound;
            roundIndex++;
        }

        // Set the top-level children
        if (currentRound.length === 1) {
            treeData.children = currentRound[0].children || [currentRound[0]];
        } else {
            treeData.children = currentRound;
        }

        // Log tree data for debugging
        console.log("Tree Data:", JSON.stringify(treeData, null, 2));

        // D3.js code to create the tournament tree
        const svg = d3.select("#tournament-tree");
        const width = 900;
        const height = Math.max(300, slots * 50); // Adjust height based on slots
        svg.attr("viewBox", [0, 0, width, height]);

        // Create a tree layout
        const treeLayout = d3.tree().size([height - 100, width - 200]);
        const root = d3.hierarchy(treeData);
        treeLayout(root);

        // Create links (edges)
        svg.append("g")
            .attr("class", "link")
            .attr("transform", "translate(100, 50)")
            .selectAll(".link")
            .data(root.links())
            .enter()
            .append("path")
            .attr("class", "link")
            .attr("d", d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x));

        // Create nodes
        const nodes = svg.append("g")
            .attr("class", "node")
            .attr("transform", "translate(100, 50)")
            .selectAll(".node")
            .data(root.descendants())
            .enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${d.y},${d.x})`);

        // Add rectangles for nodes
        nodes.append("rect")
            .attr("x", -50)
            .attr("y", -15)
            .attr("width", 100)
            .attr("height", 30)
            .attr("rx", 5)
            .attr("ry", 5);

        // Add text labels
        nodes.append("text")
            .attr("y", 0)
            .text(d => d.data.name.length > 12 ? d.data.name.substring(0, 10) + "..." : d.data.name);
    </script>
</body>
</html>